{"mappings":"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","sources":["particles.js"],"sourcesContent":["const canvas = document.getElementById('particleCanvas');\r\nconst ctx = canvas.getContext('2d');\r\n\r\ncanvas.width = window.innerWidth;\r\ncanvas.height = window.innerHeight;\r\n\r\nlet particlesArray = [];\r\nlet mouse = {\r\n    x: null,\r\n    y: null,\r\n    radius: 100 // Interaction radius\r\n};\r\n\r\n// Update mouse position\r\nwindow.addEventListener('mousemove', (event) => {\r\n    mouse.x = event.x;\r\n    mouse.y = event.y;\r\n});\r\n\r\n// Particle Object\r\nclass Particle {\r\n    constructor(x, y, directionX, directionY, size, color) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.directionX = directionX;\r\n        this.directionY = directionY;\r\n        this.size = size;\r\n        this.color = color;\r\n    }\r\n\r\n    draw() {\r\n        ctx.beginPath();\r\n        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2, false);\r\n        ctx.fillStyle = this.color;\r\n        ctx.fill();\r\n    }\r\n    update() {\r\n        // Calculate the distance between particle and mouse\r\n        let dx = mouse.x - this.x;\r\n        let dy = mouse.y - this.y;\r\n        let distance = Math.sqrt(dx * dx + dy * dy);\r\n    \r\n        // Interaction with the cursor (gentle repulsion effect)\r\n        if (distance < mouse.radius + this.size) {\r\n            // Calculate angle and direction of repulsion\r\n            let angle = Math.atan2(dy, dx);\r\n            let forceDirectionX = Math.cos(angle);\r\n            let forceDirectionY = Math.sin(angle);\r\n    \r\n            // Gradual, gentle repulsion effect\r\n            let maxDistance = mouse.radius;\r\n            let force = (maxDistance - distance) / maxDistance; // Normalized value between 0 and 1\r\n            let repulsionStrength = force * 0.2; // Lower strength for subtle effect\r\n    \r\n            // Apply directional change without increasing speed\r\n            this.directionX -= forceDirectionX * repulsionStrength;\r\n            this.directionY -= forceDirectionY * repulsionStrength;\r\n        }\r\n    \r\n        // Ensure particles keep a relatively constant base speed\r\n        const baseSpeed = 0.5; // Set a desired constant speed\r\n        let currentSpeed = Math.sqrt(this.directionX * this.directionX + this.directionY * this.directionY);\r\n    \r\n        // Normalize speed to baseSpeed to prevent speeding up or slowing down too much\r\n        this.directionX = (this.directionX / currentSpeed) * baseSpeed;\r\n        this.directionY = (this.directionY / currentSpeed) * baseSpeed;\r\n    \r\n        // Update position with adjusted directions\r\n        this.x += this.directionX;\r\n        this.y += this.directionY;\r\n    \r\n        // Bounce off edges with a small random factor\r\n        if (this.x + this.size > canvas.width || this.x - this.size < 0) {\r\n            this.directionX = -this.directionX + (Math.random() - 0.5) * 0.1;\r\n        }\r\n        if (this.y + this.size > canvas.height || this.y - this.size < 0) {\r\n            this.directionY = -this.directionY + (Math.random() - 0.5) * 0.1;\r\n        }\r\n    \r\n        this.draw();\r\n    }\r\n    \r\n}    \r\n// Initialize particle array\r\nfunction init() {\r\n    particlesArray = [];\r\n    const numberOfParticles = 300;\r\n    for (let i = 0; i < numberOfParticles; i++) {\r\n        let size = Math.random() * 3 + 1;\r\n        let x = Math.random() * (innerWidth - size * 2) + size * 2;\r\n        let y = Math.random() * (innerHeight - size * 2) + size * 2;\r\n        let directionX = (Math.random() * 0.5) - 0.25;\r\n        let directionY = (Math.random() * 0.5) - 0.25;\r\n        let color = `rgba(${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, 255, 0.8)`;\r\n\r\n        particlesArray.push(new Particle(x, y, directionX, directionY, size, color));\r\n    }\r\n}\r\n\r\n// Animation loop\r\nfunction animate() {\r\n    requestAnimationFrame(animate);\r\n    ctx.clearRect(0, 0, innerWidth, innerHeight);\r\n\r\n    particlesArray.forEach(particle => {\r\n        particle.update();\r\n    });\r\n}\r\n\r\n// Adjust canvas size on window resize\r\nwindow.addEventListener('resize', () => {\r\n    canvas.width = innerWidth;\r\n    canvas.height = innerHeight;\r\n    init();\r\n});\r\n\r\n// Initialize particles and start animation\r\ninit();\r\nanimate();\r\n"],"names":[],"version":3,"file":"index.354bd34b.js.map","sourceRoot":"/__parcel_source_root/"}